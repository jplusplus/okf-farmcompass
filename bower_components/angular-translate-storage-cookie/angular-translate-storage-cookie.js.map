{"version":3,"names":[],"mappings":"","sources":["/bower_components/bower_components/angular-translate-storage-cookie/angular-translate-storage-cookie.js"],"sourcesContent":["/*!\n * angular-translate - v2.13.1 - 2016-12-06\n * \n * Copyright (c) 2016 The angular-translate team, Pascal Precht; Licensed MIT\n */\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([], function () {\n      return (factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    factory();\n  }\n}(this, function () {\n\n$translateCookieStorageFactory.$inject = ['$cookieStore'];\nangular.module('pascalprecht.translate')\n\n/**\n * @ngdoc object\n * @name pascalprecht.translate.$translateCookieStorage\n * @requires $cookieStore\n *\n * @description\n * Abstraction layer for cookieStore. This service is used when telling angular-translate\n * to use cookieStore as storage.\n *\n */\n  .factory('$translateCookieStorage', $translateCookieStorageFactory);\n\nfunction $translateCookieStorageFactory($cookieStore) {\n\n  'use strict';\n\n  var $translateCookieStorage = {\n\n    /**\n     * @ngdoc function\n     * @name pascalprecht.translate.$translateCookieStorage#get\n     * @methodOf pascalprecht.translate.$translateCookieStorage\n     *\n     * @description\n     * Returns an item from cookieStorage by given name.\n     *\n     * @param {string} name Item name\n     * @return {string} Value of item name\n     */\n    get: function (name) {\n      return $cookieStore.get(name);\n    },\n\n    /**\n     * @ngdoc function\n     * @name pascalprecht.translate.$translateCookieStorage#set\n     * @methodOf pascalprecht.translate.$translateCookieStorage\n     *\n     * @description\n     * Sets an item in cookieStorage by given name.\n     *\n     * @deprecated use #put\n     *\n     * @param {string} name Item name\n     * @param {string} value Item value\n     */\n    set: function (name, value) {\n      $cookieStore.put(name, value);\n    },\n\n    /**\n     * @ngdoc function\n     * @name pascalprecht.translate.$translateCookieStorage#put\n     * @methodOf pascalprecht.translate.$translateCookieStorage\n     *\n     * @description\n     * Sets an item in cookieStorage by given name.\n     *\n     * @param {string} name Item name\n     * @param {string} value Item value\n     */\n    put: function (name, value) {\n      $cookieStore.put(name, value);\n    }\n  };\n\n  return $translateCookieStorage;\n}\n\n$translateCookieStorageFactory.displayName = '$translateCookieStorage';\nreturn 'pascalprecht.translate';\n\n}));\n\n\n\n\n"],"file":"../../../bower_components/angular-translate-storage-cookie/angular-translate-storage-cookie.js"}