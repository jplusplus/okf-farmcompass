{"version":3,"names":[],"mappings":"","sources":["/bower_components/angular-hotkeys/bower_components/angular-hotkeys/build/hotkeys.js"],"sourcesContent":["/*! \n * angular-hotkeys v1.7.0\n * https://chieffancypants.github.io/angular-hotkeys\n * Copyright (c) 2016 Wes Cruver\n * License: MIT\n */\n/*\n * angular-hotkeys\n *\n * Automatic keyboard shortcuts for your angular apps\n *\n * (c) 2016 Wes Cruver\n * License: MIT\n */\n\n(function() {\n\n  'use strict';\n\n  angular.module('cfp.hotkeys', []).provider('hotkeys', ['$injector', function($injector) {\n\n    /**\n     * Configurable setting to disable the cheatsheet entirely\n     * @type {Boolean}\n     */\n    this.includeCheatSheet = true;\n\n    /**\n     * Configurable setting to disable ngRoute hooks\n     * @type {Boolean}\n     */\n    this.useNgRoute = $injector.has('ngViewDirective');\n\n    /**\n     * Configurable setting for the cheat sheet title\n     * @type {String}\n     */\n\n    this.templateTitle = 'Keyboard Shortcuts:';\n\n    /**\n     * Configurable settings for the cheat sheet header and footer.  Both are HTML, and the header\n     * overrides the normal title if specified.\n     * @type {String}\n     */\n    this.templateHeader = null;\n    this.templateFooter = null;\n\n    /**\n     * Cheat sheet template in the event you want to totally customize it.\n     * @type {String}\n     */\n    this.template = '<div class=\"cfp-hotkeys-container fade\" ng-class=\"{in: helpVisible}\" style=\"display: none;\"><div class=\"cfp-hotkeys\">' +\n                      '<h4 class=\"cfp-hotkeys-title\" ng-if=\"!header\">{{ title }}</h4>' +\n                      '<div ng-bind-html=\"header\" ng-if=\"header\"></div>' +\n                      '<table><tbody>' +\n                        '<tr ng-repeat=\"hotkey in hotkeys | filter:{ description: \\'!$$undefined$$\\' }\">' +\n                          '<td class=\"cfp-hotkeys-keys\">' +\n                            '<span ng-repeat=\"key in hotkey.format() track by $index\" class=\"cfp-hotkeys-key\">{{ key }}</span>' +\n                          '</td>' +\n                          '<td class=\"cfp-hotkeys-text\">{{ hotkey.description }}</td>' +\n                        '</tr>' +\n                      '</tbody></table>' +\n                      '<div ng-bind-html=\"footer\" ng-if=\"footer\"></div>' +\n                      '<div class=\"cfp-hotkeys-close\" ng-click=\"toggleCheatSheet()\">&#215;</div>' +\n                    '</div></div>';\n\n    /**\n     * Configurable setting for the cheat sheet hotkey\n     * @type {String}\n     */\n    this.cheatSheetHotkey = '?';\n\n    /**\n     * Configurable setting for the cheat sheet description\n     * @type {String}\n     */\n    this.cheatSheetDescription = 'Show / hide this help menu';\n\n    this.$get = ['$rootElement', '$rootScope', '$compile', '$window', '$document', function ($rootElement, $rootScope, $compile, $window, $document) {\n\n      var mouseTrapEnabled = true;\n\n      function pause() {\n        mouseTrapEnabled = false;\n      }\n\n      function unpause() {\n        mouseTrapEnabled = true;\n      }\n\n      // monkeypatch Mousetrap's stopCallback() function\n      // this version doesn't return true when the element is an INPUT, SELECT, or TEXTAREA\n      // (instead we will perform this check per-key in the _add() method)\n      Mousetrap.prototype.stopCallback = function(event, element) {\n        if (!mouseTrapEnabled) {\n          return true;\n        }\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n          return false;\n        }\n\n        return (element.contentEditable && element.contentEditable == 'true');\n      };\n\n      /**\n       * Convert strings like cmd into symbols like ⌘\n       * @param  {String} combo Key combination, e.g. 'mod+f'\n       * @return {String}       The key combination with symbols\n       */\n      function symbolize (combo) {\n        var map = {\n          command   : '\\u2318',     // ⌘\n          shift     : '\\u21E7',     // ⇧\n          left      : '\\u2190',     // ←\n          right     : '\\u2192',     // →\n          up        : '\\u2191',     // ↑\n          down      : '\\u2193',     // ↓\n          'return'  : '\\u23CE',     // ⏎\n          backspace : '\\u232B'      // ⌫\n        };\n        combo = combo.split('+');\n\n        for (var i = 0; i < combo.length; i++) {\n          // try to resolve command / ctrl based on OS:\n          if (combo[i] === 'mod') {\n            if ($window.navigator && $window.navigator.platform.indexOf('Mac') >=0 ) {\n              combo[i] = 'command';\n            } else {\n              combo[i] = 'ctrl';\n            }\n          }\n\n          combo[i] = map[combo[i]] || combo[i];\n        }\n\n        return combo.join(' + ');\n      }\n\n      /**\n       * Hotkey object used internally for consistency\n       *\n       * @param {array}    combo       The keycombo. it's an array to support multiple combos\n       * @param {String}   description Description for the keycombo\n       * @param {Function} callback    function to execute when keycombo pressed\n       * @param {string}   action      the type of event to listen for (for mousetrap)\n       * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\n       * @param {Boolean}  persistent  Whether the hotkey persists navigation events\n       */\n      function Hotkey (combo, description, callback, action, allowIn, persistent) {\n        // TODO: Check that the values are sane because we could\n        // be trying to instantiate a new Hotkey with outside dev's\n        // supplied values\n\n        this.combo = combo instanceof Array ? combo : [combo];\n        this.description = description;\n        this.callback = callback;\n        this.action = action;\n        this.allowIn = allowIn;\n        this.persistent = persistent;\n        this._formated = null;\n      }\n\n      /**\n       * Helper method to format (symbolize) the key combo for display\n       *\n       * @return {[Array]} An array of the key combination sequence\n       *   for example: \"command+g c i\" becomes [\"⌘ + g\", \"c\", \"i\"]\n       *\n       */\n      Hotkey.prototype.format = function() {\n        if (this._formated === null) {\n          // Don't show all the possible key combos, just the first one.  Not sure\n          // of usecase here, so open a ticket if my assumptions are wrong\n          var combo = this.combo[0];\n\n          var sequence = combo.split(/[\\s]/);\n          for (var i = 0; i < sequence.length; i++) {\n            sequence[i] = symbolize(sequence[i]);\n          }\n          this._formated = sequence;\n        }\n\n        return this._formated;\n      };\n\n      /**\n       * A new scope used internally for the cheatsheet\n       * @type {$rootScope.Scope}\n       */\n      var scope = $rootScope.$new();\n\n      /**\n       * Holds an array of Hotkey objects currently bound\n       * @type {Array}\n       */\n      scope.hotkeys = [];\n\n      /**\n       * Contains the state of the help's visibility\n       * @type {Boolean}\n       */\n      scope.helpVisible = false;\n\n      /**\n       * Holds the title string for the help menu\n       * @type {String}\n       */\n      scope.title = this.templateTitle;\n\n      /**\n       * Holds the header HTML for the help menu\n       * @type {String}\n       */\n      scope.header = this.templateHeader;\n\n      /**\n       * Holds the footer HTML for the help menu\n       * @type {String}\n       */\n      scope.footer = this.templateFooter;\n\n      /**\n       * Expose toggleCheatSheet to hotkeys scope so we can call it using\n       * ng-click from the template\n       * @type {function}\n       */\n      scope.toggleCheatSheet = toggleCheatSheet;\n\n\n      /**\n       * Holds references to the different scopes that have bound hotkeys\n       * attached.  This is useful to catch when the scopes are `$destroy`d and\n       * then automatically unbind the hotkey.\n       *\n       * @type {Object}\n       */\n      var boundScopes = {};\n\n      if (this.useNgRoute) {\n        $rootScope.$on('$routeChangeSuccess', function (event, route) {\n          purgeHotkeys();\n\n          if (route && route.hotkeys) {\n            angular.forEach(route.hotkeys, function (hotkey) {\n              // a string was given, which implies this is a function that is to be\n              // $eval()'d within that controller's scope\n              // TODO: hotkey here is super confusing.  sometimes a function (that gets turned into an array), sometimes a string\n              var callback = hotkey[2];\n              if (typeof(callback) === 'string' || callback instanceof String) {\n                hotkey[2] = [callback, route];\n              }\n\n              // todo: perform check to make sure not already defined:\n              // this came from a route, so it's likely not meant to be persistent\n              hotkey[5] = false;\n              _add.apply(this, hotkey);\n            });\n          }\n        });\n      }\n\n\n\n      // Auto-create a help menu:\n      if (this.includeCheatSheet) {\n        var document = $document[0];\n        var element = $rootElement[0];\n        var helpMenu = angular.element(this.template);\n        _add(this.cheatSheetHotkey, this.cheatSheetDescription, toggleCheatSheet);\n\n        // If $rootElement is document or documentElement, then body must be used\n        if (element === document || element === document.documentElement) {\n          element = document.body;\n        }\n\n        angular.element(element).append($compile(helpMenu)(scope));\n      }\n\n\n      /**\n       * Purges all non-persistent hotkeys (such as those defined in routes)\n       *\n       * Without this, the same hotkey would get recreated everytime\n       * the route is accessed.\n       */\n      function purgeHotkeys() {\n        var i = scope.hotkeys.length;\n        while (i--) {\n          var hotkey = scope.hotkeys[i];\n          if (hotkey && !hotkey.persistent) {\n            _del(hotkey);\n          }\n        }\n      }\n\n      /**\n       * Toggles the help menu element's visiblity\n       */\n      var previousEsc = false;\n\n      function toggleCheatSheet() {\n        scope.helpVisible = !scope.helpVisible;\n\n        // Bind to esc to remove the cheat sheet.  Ideally, this would be done\n        // as a directive in the template, but that would create a nasty\n        // circular dependency issue that I don't feel like sorting out.\n        if (scope.helpVisible) {\n          previousEsc = _get('esc');\n          _del('esc');\n\n          // Here's an odd way to do this: we're going to use the original\n          // description of the hotkey on the cheat sheet so that it shows up.\n          // without it, no entry for esc will ever show up (#22)\n          _add('esc', previousEsc.description, toggleCheatSheet, null, ['INPUT', 'SELECT', 'TEXTAREA']);\n        } else {\n          _del('esc');\n\n          // restore the previously bound ESC key\n          if (previousEsc !== false) {\n            _add(previousEsc);\n          }\n        }\n      }\n\n      /**\n       * Creates a new Hotkey and creates the Mousetrap binding\n       *\n       * @param {string}   combo       mousetrap key binding\n       * @param {string}   description description for the help menu\n       * @param {Function} callback    method to call when key is pressed\n       * @param {string}   action      the type of event to listen for (for mousetrap)\n       * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')\n       * @param {boolean}  persistent  if true, the binding is preserved upon route changes\n       */\n      function _add (combo, description, callback, action, allowIn, persistent) {\n\n        // used to save original callback for \"allowIn\" wrapping:\n        var _callback;\n\n        // these elements are prevented by the default Mousetrap.stopCallback():\n        var preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];\n\n        // Determine if object format was given:\n        var objType = Object.prototype.toString.call(combo);\n\n        if (objType === '[object Object]') {\n          description = combo.description;\n          callback    = combo.callback;\n          action      = combo.action;\n          persistent  = combo.persistent;\n          allowIn     = combo.allowIn;\n          combo       = combo.combo;\n        }\n\n        // no duplicates please\n        _del(combo);\n\n        // description is optional:\n        if (description instanceof Function) {\n          action = callback;\n          callback = description;\n          description = '$$undefined$$';\n        } else if (angular.isUndefined(description)) {\n          description = '$$undefined$$';\n        }\n\n        // any items added through the public API are for controllers\n        // that persist through navigation, and thus undefined should mean\n        // true in this case.\n        if (persistent === undefined) {\n          persistent = true;\n        }\n        // if callback is defined, then wrap it in a function\n        // that checks if the event originated from a form element.\n        // the function blocks the callback from executing unless the element is specified\n        // in allowIn (emulates Mousetrap.stopCallback() on a per-key level)\n        if (typeof callback === 'function') {\n\n          // save the original callback\n          _callback = callback;\n\n          // make sure allowIn is an array\n          if (!(allowIn instanceof Array)) {\n            allowIn = [];\n          }\n\n          // remove anything from preventIn that's present in allowIn\n          var index;\n          for (var i=0; i < allowIn.length; i++) {\n            allowIn[i] = allowIn[i].toUpperCase();\n            index = preventIn.indexOf(allowIn[i]);\n            if (index !== -1) {\n              preventIn.splice(index, 1);\n            }\n          }\n\n          // create the new wrapper callback\n          callback = function(event) {\n            var shouldExecute = true;\n\n            // if the callback is executed directly `hotkey.get('w').callback()`\n            // there will be no event, so just execute the callback.\n            if (event) {\n              var target = event.target || event.srcElement; // srcElement is IE only\n              var nodeName = target.nodeName.toUpperCase();\n\n              // check if the input has a mousetrap class, and skip checking preventIn if so\n              if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {\n                shouldExecute = true;\n              } else {\n                // don't execute callback if the event was fired from inside an element listed in preventIn\n                for (var i=0; i<preventIn.length; i++) {\n                  if (preventIn[i] === nodeName) {\n                    shouldExecute = false;\n                    break;\n                  }\n                }\n              }\n            }\n\n            if (shouldExecute) {\n              wrapApply(_callback.apply(this, arguments));\n            }\n          };\n        }\n\n        if (typeof(action) === 'string') {\n          Mousetrap.bind(combo, wrapApply(callback), action);\n        } else {\n          Mousetrap.bind(combo, wrapApply(callback));\n        }\n\n        var hotkey = new Hotkey(combo, description, callback, action, allowIn, persistent);\n        scope.hotkeys.push(hotkey);\n        return hotkey;\n      }\n\n      /**\n       * delete and unbind a Hotkey\n       *\n       * @param  {mixed} hotkey   Either the bound key or an instance of Hotkey\n       * @return {boolean}        true if successful\n       */\n      function _del (hotkey) {\n        var combo = (hotkey instanceof Hotkey) ? hotkey.combo : hotkey;\n\n        Mousetrap.unbind(combo);\n\n        if (angular.isArray(combo)) {\n          var retStatus = true;\n          var i = combo.length;\n          while (i--) {\n            retStatus = _del(combo[i]) && retStatus;\n          }\n          return retStatus;\n        } else {\n          var index = scope.hotkeys.indexOf(_get(combo));\n\n          if (index > -1) {\n            // if the combo has other combos bound, don't unbind the whole thing, just the one combo:\n            if (scope.hotkeys[index].combo.length > 1) {\n              scope.hotkeys[index].combo.splice(scope.hotkeys[index].combo.indexOf(combo), 1);\n            } else {\n\n              // remove hotkey from bound scopes\n              angular.forEach(boundScopes, function (boundScope) {\n                var scopeIndex = boundScope.indexOf(scope.hotkeys[index]);\n                if (scopeIndex !== -1) {\n                    boundScope.splice(scopeIndex, 1);\n                }\n              });\n\n              scope.hotkeys.splice(index, 1);\n            }\n            return true;\n          }\n        }\n\n        return false;\n\n      }\n\n      /**\n       * Get a Hotkey object by key binding\n       *\n       * @param  {[string]} [combo]  the key the Hotkey is bound to. Returns all key bindings if no key is passed\n       * @return {Hotkey}          The Hotkey object\n       */\n      function _get (combo) {\n\n        if (!combo) {\n          return scope.hotkeys;\n        }\n\n        var hotkey;\n\n        for (var i = 0; i < scope.hotkeys.length; i++) {\n          hotkey = scope.hotkeys[i];\n\n          if (hotkey.combo.indexOf(combo) > -1) {\n            return hotkey;\n          }\n        }\n\n        return false;\n      }\n\n      /**\n       * Binds the hotkey to a particular scope.  Useful if the scope is\n       * destroyed, we can automatically destroy the hotkey binding.\n       *\n       * @param  {Object} scope The scope to bind to\n       */\n      function bindTo (scope) {\n        // Only initialize once to allow multiple calls for same scope.\n        if (!(scope.$id in boundScopes)) {\n\n          // Add the scope to the list of bound scopes\n          boundScopes[scope.$id] = [];\n\n          scope.$on('$destroy', function () {\n            var i = boundScopes[scope.$id].length;\n            while (i--) {\n              _del(boundScopes[scope.$id].pop());\n            }\n          });\n        }\n        // return an object with an add function so we can keep track of the\n        // hotkeys and their scope that we added via this chaining method\n        return {\n          add: function (args) {\n            var hotkey;\n\n            if (arguments.length > 1) {\n              hotkey = _add.apply(this, arguments);\n            } else {\n              hotkey = _add(args);\n            }\n\n            boundScopes[scope.$id].push(hotkey);\n            return this;\n          }\n        };\n      }\n\n      /**\n       * All callbacks sent to Mousetrap are wrapped using this function\n       * so that we can force a $scope.$apply()\n       *\n       * @param  {Function} callback [description]\n       * @return {[type]}            [description]\n       */\n      function wrapApply (callback) {\n        // return mousetrap a function to call\n        return function (event, combo) {\n\n          // if this is an array, it means we provided a route object\n          // because the scope wasn't available yet, so rewrap the callback\n          // now that the scope is available:\n          if (callback instanceof Array) {\n            var funcString = callback[0];\n            var route = callback[1];\n            callback = function (event) {\n              route.scope.$eval(funcString);\n            };\n          }\n\n          // this takes place outside angular, so we'll have to call\n          // $apply() to make sure angular's digest happens\n          $rootScope.$apply(function() {\n            // call the original hotkey callback with the keyboard event\n            callback(event, _get(combo));\n          });\n        };\n      }\n\n      var publicApi = {\n        add                   : _add,\n        del                   : _del,\n        get                   : _get,\n        bindTo                : bindTo,\n        template              : this.template,\n        toggleCheatSheet      : toggleCheatSheet,\n        includeCheatSheet     : this.includeCheatSheet,\n        cheatSheetHotkey      : this.cheatSheetHotkey,\n        cheatSheetDescription : this.cheatSheetDescription,\n        useNgRoute            : this.useNgRoute,\n        purgeHotkeys          : purgeHotkeys,\n        templateTitle         : this.templateTitle,\n        pause                 : pause,\n        unpause               : unpause\n      };\n\n      return publicApi;\n\n    }];\n\n\n  }])\n\n  .directive('hotkey', ['hotkeys', function (hotkeys) {\n    return {\n      restrict: 'A',\n      link: function (scope, el, attrs) {\n        var keys = [],\n            allowIn;\n\n        angular.forEach(scope.$eval(attrs.hotkey), function (func, hotkey) {\n          // split and trim the hotkeys string into array\n          allowIn = typeof attrs.hotkeyAllowIn === \"string\" ? attrs.hotkeyAllowIn.split(/[\\s,]+/) : [];\n\n          keys.push(hotkey);\n\n          hotkeys.add({\n            combo: hotkey,\n            description: attrs.hotkeyDescription,\n            callback: func,\n            action: attrs.hotkeyAction,\n            allowIn: allowIn\n          });\n        });\n\n        // remove the hotkey if the directive is destroyed:\n        el.bind('$destroy', function() {\n          angular.forEach(keys, hotkeys.del);\n        });\n      }\n    };\n  }])\n\n  .run(['hotkeys', function(hotkeys) {\n    // force hotkeys to run by injecting it. Without this, hotkeys only runs\n    // when a controller or something else asks for it via DI.\n  }]);\n\n})();\n\n/*global define:false */\n/**\n * Copyright 2015 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.5.2\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n        _MAP[i + 96] = i;\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (window, document);\n\n\n"],"file":"../../../../bower_components/angular-hotkeys/build/hotkeys.js"}